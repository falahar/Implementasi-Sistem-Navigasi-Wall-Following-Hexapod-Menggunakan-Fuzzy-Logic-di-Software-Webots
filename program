/*
 * Copyright 1996-2021 Cyberbotics Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <webots/motor.h>
#include <webots/robot.h>
#include <webots/distance_sensor.h>

#include <math.h>
#include <stdlib.h>
#include <stdio.h>

float jarak, amplitudo;
float Dekat,Normal,Jauh;
float Kiri,Lurus,Kanan;
float rule1, rule2, rule3;
float z1, z2a, z2b, z3;
float awal,Ki, Ka;

int main(int argc, char **argv) {
  wb_robot_init();

  int time_step = (int)wb_robot_get_basic_time_step();

  // Meaning of the motor charcters:
  // - 'R': Right / 'L': Left
  // - 'A': Front / 'M': Middle / 'P': Rear
  // - 'C': Base / 'F': Shoulder / 'T': Knee
  WbDeviceTag motors[18] = {wb_robot_get_device("RPC"), wb_robot_get_device("RPF"), wb_robot_get_device("RPT"),
                            wb_robot_get_device("RMC"), wb_robot_get_device("RMF"), wb_robot_get_device("RMT"),
                            wb_robot_get_device("RAC"), wb_robot_get_device("RAF"), wb_robot_get_device("RAT"),
                            wb_robot_get_device("LPC"), wb_robot_get_device("LPF"), wb_robot_get_device("LPT"),
                            wb_robot_get_device("LMC"), wb_robot_get_device("LMF"), wb_robot_get_device("LMT"),
                            wb_robot_get_device("LAC"), wb_robot_get_device("LAF"), wb_robot_get_device("LAT")};
  

  WbDeviceTag maju = wb_robot_get_device("jalan");
  WbDeviceTag maju1 = wb_robot_get_device("jalan1");
  
  wb_distance_sensor_enable(maju, time_step);
  wb_distance_sensor_enable(maju1, time_step);

  while (wb_robot_step(time_step) != -1) {
    float time = wb_robot_get_time();
    
    //double jarak_ukur = wb_distance_sensor_get_value(jalan1);
    float jarak = wb_distance_sensor_get_value(maju);
    float jarak1 = wb_distance_sensor_get_value(maju1);
    
    // Memasukkan Input Fuzzy Logic 
    float C = (rule1*z1) + (rule2*z2a) + (rule2*z2b) + (rule3*z3);
    float D = rule1+rule2+rule3;
     
    awal = (C/D)/10;
    
    // Mengarahkan Hexapod dari Hasil Deffuzifikasi
    // Ki = Kiri dan Ka = Kanan
    Ki = 1- awal;
    Ka = awal;
    
    // frequency [Hz] Jalan Maju
    const float f = 0.5;
    
    // amplitude [rad] Lurus
    const float aCL = 0.25;  // Amplitude for the "base" motors.
    const float aFL = 0.2;   // Amplitude for the "shoulder" motors.
    const float aTL = 0.05;  // Amplitude for the "knee" motors.
    const float aL[18] = {aCL, aFL, -aTL, -aCL, -aFL, aTL, aCL, aFL, -aTL, aCL, -aFL, aTL, -aCL, aFL, -aTL, aCL, -aFL, aTL};
  
    // amplitude [rad] Fuzzy Logic
    const float aC = 0.25;  // Amplitude for the "base" motors.
    const float aF = 0.2;   // Amplitude for the "shoulder" motors.
    const float aT = 0.05;  // Amplitude for the "knee" motors.
    const float a[18] = {aC*Ki, aF, -aT, -aC*Ki, -aF, aT, aC*Ki, aF, -aT, aC*Ka, -aF, aT, -aC*Ka, aF, -aT, aC*Ka, -aF, aT};
    
  
    // phase [s]
    float pC = 0.0;  // Phase for the "base" motors.
    float pF = 2.0;  // Phase for the "shoulder" motors.
    float pT = 2.5;  // Phase for the "knee" motors.
    const float p[18] = {pC, pF, pT, pC, pF, pT, pC, pF, pT, pC, pF, pT, pC, pF, pT, pC, pF, pT};
  
    // offset [rad]
    const float dC = 0.6;   // Offset for the "base" motors.
    const float dF = 0.8;   // Offset for the "shoulder" motors.
    const float dT = -2.4;  // Offset for the "knee" motors.
    const float d[18] = {-dC, dF, dT, 0.0, dF, dT, dC, dF, dT, dC, dF, dT, 0.0, dF, dT, -dC, dF, dT};
  
    
  // Fuzzy Logic //
  
  // Pertama, Fuzzifikasi //
    void jarakDekat(){
      if (jarak <= 20){Dekat =1;}
      else if (jarak >=20 && jarak <=55){Dekat=(55-jarak)/35;}
      else if (jarak >= 55){Dekat =0;}
    }
  
    void jarakNormal(){
      if (jarak <= 25){Normal =0;}
      else if (jarak >=25 && jarak <=55){Normal=(jarak-25)/30;}
      else if (jarak >=55 && jarak <=85){Normal=(85-jarak)/30;}
      else if (jarak >= 85){Normal =0;}
    }
  
    void jarakJauh(){
      if (jarak <=55 ){Jauh =0;}
      else if (jarak >=55 && jarak <=90){Jauh=(jarak-55)/35;}
      else if (jarak >= 130){Jauh =1;}
    }
  
    void arahKiri(){
      if (amplitudo <= 8){Kiri =1;}
      else if (amplitudo >=8 && amplitudo <=15){Kiri=(15-amplitudo)/7;}
      else if (amplitudo >= 15){Kiri =0;}
    }
  
    void arahLurus(){
      if (amplitudo <= 10){Lurus =0;}
      else if (amplitudo >=10 && amplitudo <=15){Lurus=(amplitudo-10)/5;}
      else if (amplitudo >=15 && amplitudo <=20){Lurus=(20-amplitudo)/5;}
      else if (amplitudo >= 20){Lurus =0;}
    }
  
    void arahKanan(){
      if (amplitudo <= 15){Kanan =0;}
      else if (amplitudo >=15 && amplitudo <=22){Kanan=(amplitudo-130)/7;}
      else if (amplitudo >= 22){Kanan =1;}
    }
    
    void fuzzyfikasi(){
      jarakDekat();
      jarakNormal();
      jarakJauh();
      arahKiri();
      arahLurus();
      arahKanan();
    }
  
  // Kedua Rule Base // 
    void rule (){
      fuzzyfikasi();
      //If jarak dekat, maka hexapod ke kanan
      rule1 =  Dekat;
      z1 = 15 - (7*Dekat);
      //If jarak normal, maka hexapod lurus
      rule2 = Normal;
      z2a = 10 + (5*Normal);
      z2b = 20 - (Normal*5);
      //If jarak jauh, maka hexapod ke kiri
      rule3 = Jauh;
      z3 = 15 + (7*Jauh);
    }

  // Ketiga Defuzifikasi
    float defuzyfikasi(){
      rule();
      float A = (rule1*z1) + (rule2*z2a) + (rule2*z2b) + (rule3*z3);
      float B = rule1+rule2+rule3;
      //printf("\nA :%f", A);
      //printf("\nB :%f", B);
      return (A/B)/10;
    };
    
    //scanf("%f", &jarak);
    rule();
  
    //printf("Jarak : %f\n", jarak_ukur);
    printf("jarak adalah: %f ", jarak);
    printf("Depan adalah: %f", jarak1);
    //printf("jarak adalah: %f", awal);
    printf("\nDefuzzyfikasi :%f", defuzyfikasi());
    printf("\n\n");
    
    //Rule
    
    double Tembok_Depan = wb_distance_sensor_get_value(maju1) > 90;
    
    if(Tembok_Depan==true)
    {
      int i;
      for (i = 0; i < 18; ++i)  // Apply a sinuosidal function for each motor.
      wb_motor_set_position(motors[i], aL[i] * sin(2.0 * M_PI * f * time + p[i]) + d[i]);
    }
    else
    {
      int i;
      for (i = 0; i < 18; ++i)  // Apply a sinuosidal function for each motor.
      wb_motor_set_position(motors[i], a[i] * sin(2.0 * M_PI * f * time + p[i]) + d[i]);
    }
    
  };

  wb_robot_cleanup();

  return EXIT_SUCCESS;
}
